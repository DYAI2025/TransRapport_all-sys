name: Cross-Platform Build & Package

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Run contract tests
        run: |
          python -m pytest tests/contract/ -v --tb=short

      - name: Run integration tests
        run: |
          python -m pytest tests/integration/ -v --tb=short

  build:
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
            rust_target: 'universal-apple-darwin'
          - platform: 'ubuntu-20.04'
            args: ''
            rust_target: 'x86_64-unknown-linux-gnu'
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            rust_target: 'x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './desktop/package-lock.json'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust_target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './desktop/src-tauri -> target'

      - name: Install system dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            libgtk-3-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev

      - name: Install frontend dependencies
        working-directory: ./desktop
        run: npm ci

      - name: Build frontend
        working-directory: ./desktop
        run: npm run build

      - name: Build Tauri application
        working-directory: ./desktop
        run: |
          npm run tauri build -- ${{ matrix.args }}

      - name: Upload artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-installers
          path: |
            ./desktop/src-tauri/target/release/bundle/msi/*.msi
            ./desktop/src-tauri/target/release/bundle/nsis/*.exe
          retention-days: 7

      - name: Upload artifacts (macOS)
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-installers
          path: |
            ./desktop/src-tauri/target/universal-apple-darwin/release/bundle/dmg/*.dmg
            ./desktop/src-tauri/target/universal-apple-darwin/release/bundle/macos/*.app
          retention-days: 7

      - name: Upload artifacts (Linux)
        if: matrix.platform == 'ubuntu-20.04'
        uses: actions/upload-artifact@v4
        with:
          name: linux-installers
          path: |
            ./desktop/src-tauri/target/release/bundle/deb/*.deb
            ./desktop/src-tauri/target/release/bundle/rpm/*.rpm
            ./desktop/src-tauri/target/release/bundle/appimage/*.AppImage
          retention-days: 7

  sign:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        platform: [windows-latest, macos-latest, ubuntu-20.04]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install signing dependencies
        run: |
          pip install -r requirements-dev.txt
          pip install -e .

      # Windows code signing
      - name: Sign Windows installers
        if: matrix.platform == 'windows-latest'
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_KEY_VAULT_URL: ${{ secrets.AZURE_KEY_VAULT_URL }}
        run: |
          python -m src.cli.package_cli sign \
            --package-path "./artifacts/windows-installers/*.msi" \
            --platform windows \
            --certificate-source azure_key_vault \
            --format human

      # macOS code signing
      - name: Sign macOS installers
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
        run: |
          python -m src.cli.package_cli sign \
            --package-path "./artifacts/macos-installers/*.dmg" \
            --platform macos \
            --certificate-source apple_developer \
            --format human

      # Linux GPG signing
      - name: Sign Linux packages
        if: matrix.platform == 'ubuntu-20.04'
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          python -m src.cli.package_cli sign \
            --package-path "./artifacts/linux-installers/*.deb" \
            --platform linux \
            --certificate-source local_certificate \
            --format human

      - name: Upload signed artifacts
        uses: actions/upload-artifact@v4
        with:
          name: signed-${{ matrix.platform }}
          path: ./artifacts/
          retention-days: 30

  validate:
    needs: [build, sign]
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        platform: [windows-latest, macos-latest, ubuntu-20.04]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download signed artifacts
        uses: actions/download-artifact@v4
        with:
          name: signed-${{ matrix.platform }}
          path: ./artifacts

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install validation dependencies
        run: |
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Validate installers
        run: |
          python -m src.cli.package_cli validate \
            --package-path "./artifacts/**/*" \
            --validation-type full \
            --format human

      - name: Run installation validation tests
        run: |
          python -m pytest tests/integration/test_*_install.py -v

  release:
    needs: [test, build, sign, validate]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all signed artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release-artifacts

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./release-artifacts/**/*.msi
            ./release-artifacts/**/*.exe
            ./release-artifacts/**/*.dmg
            ./release-artifacts/**/*.deb
            ./release-artifacts/**/*.rpm
            ./release-artifacts/**/*.AppImage
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}